/**
 * Zaakregistratiecomponent (ZRC) API
 * Een API om een zaakregistratiecomponent te benaderen
 *
 * OpenAPI spec version: 1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Rol'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Rol'));
  } else {
    // Browser globals (root is window)
    if (!root.ZaakregistratiecomponentZrcApi) {
      root.ZaakregistratiecomponentZrcApi = {};
    }
    root.ZaakregistratiecomponentZrcApi.RollenApi = factory(root.ZaakregistratiecomponentZrcApi.ApiClient, root.ZaakregistratiecomponentZrcApi.Rol);
  }
}(this, function(ApiClient, Rol) {
  'use strict';

  /**
   * Rollen service.
   * @module api/RollenApi
   * @version 1
   */

  /**
   * Constructs a new RollenApi. 
   * @alias module:api/RollenApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the rollenByIdGet operation.
     * @callback module:api/RollenApi~rollenByIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rol} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * rol_read
     * 
     * @param {Number} id A unique integer value identifying this Rol.
     * @param {module:api/RollenApi~rollenByIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rol}
     */
    this.rollenByIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling rollenByIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Rol;

      return this.apiClient.callApi(
        '/rollen/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rollenPost operation.
     * @callback module:api/RollenApi~rollenPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Rol} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * rol_create
     * Koppel een BETROKKENE aan een ZAAK.
     * @param {module:model/Rol} body 
     * @param {module:api/RollenApi~rollenPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rol}
     */
    this.rollenPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling rollenPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Rol;

      return this.apiClient.callApi(
        '/rollen', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
